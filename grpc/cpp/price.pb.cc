// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: price.proto

#include "price.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace price {
constexpr PriceRequest::PriceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modelcode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , year_(0){}
struct PriceRequestDefaultTypeInternal {
  constexpr PriceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PriceRequestDefaultTypeInternal() {}
  union {
    PriceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PriceRequestDefaultTypeInternal _PriceRequest_default_instance_;
constexpr PriceReply::PriceReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currencycode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(0){}
struct PriceReplyDefaultTypeInternal {
  constexpr PriceReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PriceReplyDefaultTypeInternal() {}
  union {
    PriceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PriceReplyDefaultTypeInternal _PriceReply_default_instance_;
}  // namespace price
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_price_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_price_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_price_2eproto = nullptr;

const uint32_t TableStruct_price_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::price::PriceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::price::PriceRequest, modelcode_),
  PROTOBUF_FIELD_OFFSET(::price::PriceRequest, color_),
  PROTOBUF_FIELD_OFFSET(::price::PriceRequest, year_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::price::PriceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::price::PriceReply, price_),
  PROTOBUF_FIELD_OFFSET(::price::PriceReply, currencycode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::price::PriceRequest)},
  { 9, -1, -1, sizeof(::price::PriceReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::price::_PriceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::price::_PriceReply_default_instance_),
};

const char descriptor_table_protodef_price_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013price.proto\022\005price\">\n\014PriceRequest\022\021\n\t"
  "modelCode\030\001 \001(\t\022\r\n\005color\030\002 \001(\t\022\014\n\004year\030\003"
  " \001(\005\"1\n\nPriceReply\022\r\n\005price\030\001 \001(\005\022\024\n\014cur"
  "rencyCode\030\002 \001(\t2<\n\006Pricer\0222\n\010GetPrice\022\023."
  "price.PriceRequest\032\021.price.PriceReplyb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_price_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_price_2eproto = {
  false, false, 205, descriptor_table_protodef_price_2eproto, "price.proto", 
  &descriptor_table_price_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_price_2eproto::offsets,
  file_level_metadata_price_2eproto, file_level_enum_descriptors_price_2eproto, file_level_service_descriptors_price_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_price_2eproto_getter() {
  return &descriptor_table_price_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_price_2eproto(&descriptor_table_price_2eproto);
namespace price {

// ===================================================================

class PriceRequest::_Internal {
 public:
};

PriceRequest::PriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:price.PriceRequest)
}
PriceRequest::PriceRequest(const PriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    modelcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_modelcode().empty()) {
    modelcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modelcode(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  year_ = from.year_;
  // @@protoc_insertion_point(copy_constructor:price.PriceRequest)
}

inline void PriceRequest::SharedCtor() {
modelcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  modelcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
year_ = 0;
}

PriceRequest::~PriceRequest() {
  // @@protoc_insertion_point(destructor:price.PriceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PriceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  modelcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PriceRequest::ArenaDtor(void* object) {
  PriceRequest* _this = reinterpret_cast< PriceRequest* >(object);
  (void)_this;
}
void PriceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:price.PriceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modelcode_.ClearToEmpty();
  color_.ClearToEmpty();
  year_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string modelCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_modelcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "price.PriceRequest.modelCode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "price.PriceRequest.color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PriceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:price.PriceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string modelCode = 1;
  if (!this->_internal_modelcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modelcode().data(), static_cast<int>(this->_internal_modelcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "price.PriceRequest.modelCode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modelcode(), target);
  }

  // string color = 2;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "price.PriceRequest.color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_color(), target);
  }

  // int32 year = 3;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:price.PriceRequest)
  return target;
}

size_t PriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:price.PriceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modelCode = 1;
  if (!this->_internal_modelcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcode());
  }

  // string color = 2;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // int32 year = 3;
  if (this->_internal_year() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceRequest::GetClassData() const { return &_class_data_; }

void PriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PriceRequest *>(to)->MergeFrom(
      static_cast<const PriceRequest &>(from));
}


void PriceRequest::MergeFrom(const PriceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:price.PriceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_modelcode().empty()) {
    _internal_set_modelcode(from._internal_modelcode());
  }
  if (!from._internal_color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_year() != 0) {
    _internal_set_year(from._internal_year());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceRequest::CopyFrom(const PriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:price.PriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceRequest::IsInitialized() const {
  return true;
}

void PriceRequest::InternalSwap(PriceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &modelcode_, lhs_arena,
      &other->modelcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, lhs_arena,
      &other->color_, rhs_arena
  );
  swap(year_, other->year_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_price_2eproto_getter, &descriptor_table_price_2eproto_once,
      file_level_metadata_price_2eproto[0]);
}

// ===================================================================

class PriceReply::_Internal {
 public:
};

PriceReply::PriceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:price.PriceReply)
}
PriceReply::PriceReply(const PriceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currencycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currencycode().empty()) {
    currencycode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currencycode(), 
      GetArenaForAllocation());
  }
  price_ = from.price_;
  // @@protoc_insertion_point(copy_constructor:price.PriceReply)
}

inline void PriceReply::SharedCtor() {
currencycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
price_ = 0;
}

PriceReply::~PriceReply() {
  // @@protoc_insertion_point(destructor:price.PriceReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PriceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  currencycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PriceReply::ArenaDtor(void* object) {
  PriceReply* _this = reinterpret_cast< PriceReply* >(object);
  (void)_this;
}
void PriceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PriceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:price.PriceReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currencycode_.ClearToEmpty();
  price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string currencyCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currencycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "price.PriceReply.currencyCode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PriceReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:price.PriceReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 price = 1;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_price(), target);
  }

  // string currencyCode = 2;
  if (!this->_internal_currencycode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currencycode().data(), static_cast<int>(this->_internal_currencycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "price.PriceReply.currencyCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currencycode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:price.PriceReply)
  return target;
}

size_t PriceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:price.PriceReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currencyCode = 2;
  if (!this->_internal_currencycode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currencycode());
  }

  // int32 price = 1;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PriceReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceReply::GetClassData() const { return &_class_data_; }

void PriceReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PriceReply *>(to)->MergeFrom(
      static_cast<const PriceReply &>(from));
}


void PriceReply::MergeFrom(const PriceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:price.PriceReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_currencycode().empty()) {
    _internal_set_currencycode(from._internal_currencycode());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceReply::CopyFrom(const PriceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:price.PriceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceReply::IsInitialized() const {
  return true;
}

void PriceReply::InternalSwap(PriceReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currencycode_, lhs_arena,
      &other->currencycode_, rhs_arena
  );
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_price_2eproto_getter, &descriptor_table_price_2eproto_once,
      file_level_metadata_price_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace price
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::price::PriceRequest* Arena::CreateMaybeMessage< ::price::PriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::price::PriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::price::PriceReply* Arena::CreateMaybeMessage< ::price::PriceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::price::PriceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
